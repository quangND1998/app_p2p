import os
import json
from datetime import datetime
from io import BytesIO
import logging
from typing import Optional, Dict, Any
from pathlib import Path

logger = logging.getLogger(__name__)

class TransactionStorage:
    def __init__(self, base_dir: str = "transactions"):
        """Kh·ªüi t·∫°o TransactionStorage v·ªõi th∆∞ m·ª•c c∆° s·ªü"""
        self.base_dir = Path(base_dir)
        self.qr_dir = self.base_dir / "qr_codes"
        self.logger = logging.getLogger(__name__)
        
        # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
        self.base_dir.mkdir(parents=True, exist_ok=True)
        self.qr_dir.mkdir(parents=True, exist_ok=True)
        
    def _get_date_file_path(self, date: datetime) -> Path:
        """L·∫•y ƒë∆∞·ªùng d·∫´n file JSON cho m·ªôt ng√†y c·ª• th·ªÉ"""
        date_str = date.strftime("%Y-%m-%d")
        return self.base_dir / f"transactions_{date_str}.json"
        
    def _get_qr_filename(self, transaction_type: str, order_number: str, timestamp: datetime) -> str:
        """T·∫°o t√™n file cho m√£ QR"""
        date_str = timestamp.strftime("%Y%m%d_%H%M%S")
        return f"{transaction_type}_{date_str}_{order_number}.png"
        
    def save_transaction(self, transaction_info: dict, qr_image: bytes = None, order_status: str = None) -> dict:
        """
        L∆∞u th√¥ng tin giao d·ªãch v√† m√£ QR
        Args:
            transaction_info: Th√¥ng tin giao d·ªãch
            qr_image: D·ªØ li·ªáu QR code (bytes)
            order_status: Tr·∫°ng th√°i c·ªßa order (optional)
        Returns:
            dict: Th√¥ng tin giao d·ªãch ƒë√£ l∆∞u
        """
        try:
            # L·∫•y timestamp t·ª´ transaction_info ho·∫∑c s·ª≠ d·ª•ng th·ªùi gian hi·ªán t·∫°i
            timestamp = datetime.fromtimestamp(transaction_info.get('timestamp', datetime.now().timestamp()))
            date_file = self._get_date_file_path(timestamp)
            
            # ƒê·ªçc d·ªØ li·ªáu hi·ªán c√≥ ho·∫∑c t·∫°o m·ªõi
            transactions = []
            if date_file.exists():
                with open(date_file, 'r', encoding='utf-8') as f:
                    transactions = json.load(f)
            
            # Th√™m th√¥ng tin giao d·ªãch m·ªõi
            transaction_info['timestamp'] = timestamp.timestamp()
            
            # Th√™m order_status n·∫øu c√≥
            if order_status:
                transaction_info['order_status'] = order_status
                self.logger.info(f"üìä ƒê√£ th√™m order_status: {order_status} cho order {transaction_info.get('order_number', 'N/A')}")
            
            # L∆∞u m√£ QR n·∫øu c√≥
            if qr_image:
                qr_filename = self._get_qr_filename(
                    transaction_info['type'],
                    transaction_info['order_number'],
                    timestamp
                )
                qr_path = self.qr_dir / qr_filename
                with open(qr_path, 'wb') as f:
                    f.write(qr_image)
                transaction_info['qr_path'] = str(qr_path)
            
            # Ki·ªÉm tra xem order_number ƒë√£ t·ªìn t·∫°i ch∆∞a
            order_number = transaction_info.get('order_number')
            existing_index = None
            
            if order_number:
                for i, existing_transaction in enumerate(transactions):
                    if existing_transaction.get('order_number') == order_number:
                        existing_index = i
                        break
            
            if existing_index is not None:
                # C·∫≠p nh·∫≠t transaction hi·ªán c√≥
                self.logger.info(f"üîÑ C·∫≠p nh·∫≠t transaction hi·ªán c√≥ cho order {order_number}")
                transactions[existing_index] = transaction_info
            else:
                # Th√™m transaction m·ªõi
                self.logger.info(f"‚ûï Th√™m transaction m·ªõi cho order {order_number}")
                transactions.append(transaction_info)
            
            # L∆∞u l·∫°i file
            with open(date_file, 'w', encoding='utf-8') as f:
                json.dump(transactions, f, ensure_ascii=False, indent=2)
            
            action = "c·∫≠p nh·∫≠t" if existing_index is not None else "l∆∞u"
            self.logger.info(f"ƒê√£ {action} giao d·ªãch {order_number} v√†o file {date_file}")
            return transaction_info
            
        except Exception as e:
            self.logger.error(f"L·ªói khi l∆∞u giao d·ªãch: {e}")
            raise
            
    def get_transactions_by_date(self, date: datetime) -> list:
        """L·∫•y danh s√°ch giao d·ªãch theo ng√†y"""
        try:
            date_file = self._get_date_file_path(date)
            if not date_file.exists():
                return []
                
            with open(date_file, 'r', encoding='utf-8') as f:
                return json.load(f)
                
        except Exception as e:
            self.logger.error(f"L·ªói khi ƒë·ªçc giao d·ªãch ng√†y {date}: {e}")
            return []
            
    def get_transactions_by_date_range(self, start_date: datetime, end_date: datetime) -> list:
        """L·∫•y danh s√°ch giao d·ªãch trong kho·∫£ng th·ªùi gian"""
        try:
            all_transactions = []
            current_date = start_date
            
            while current_date <= end_date:
                transactions = self.get_transactions_by_date(current_date)
                all_transactions.extend(transactions)
                current_date = current_date.replace(day=current_date.day + 1)
                
            return all_transactions
            
        except Exception as e:
            self.logger.error(f"L·ªói khi ƒë·ªçc giao d·ªãch t·ª´ {start_date} ƒë·∫øn {end_date}: {e}")
            return []
            
    def get_transaction_by_order(self, order_number: str) -> dict:
        """T√¨m giao d·ªãch theo s·ªë order"""
        try:
            # T√¨m trong t·∫•t c·∫£ c√°c file JSON
            for date_file in self.base_dir.glob("transactions_*.json"):
                with open(date_file, 'r', encoding='utf-8') as f:
                    transactions = json.load(f)
                    for transaction in transactions:
                        if transaction.get('order_number') == order_number:
                            return transaction
            return None
            
        except Exception as e:
            self.logger.error(f"L·ªói khi t√¨m giao d·ªãch {order_number}: {e}")
            return None
            
    def get_recent_transactions(self, limit: int = 10) -> list:
        """L·∫•y danh s√°ch giao d·ªãch g·∫ßn ƒë√¢y nh·∫•t"""
        try:
            all_transactions = []
            
            # ƒê·ªçc t·∫•t c·∫£ c√°c file JSON
            for date_file in sorted(self.base_dir.glob("transactions_*.json"), reverse=True):
                with open(date_file, 'r', encoding='utf-8') as f:
                    transactions = json.load(f)
                    all_transactions.extend(transactions)
                    
            # S·∫Øp x·∫øp theo th·ªùi gian v√† l·∫•y limit giao d·ªãch g·∫ßn nh·∫•t
            all_transactions.sort(key=lambda x: x.get('timestamp', 0), reverse=True)
            return all_transactions[:limit]
            
        except Exception as e:
            self.logger.error(f"L·ªói khi l·∫•y giao d·ªãch g·∫ßn ƒë√¢y: {e}")
            return []
    
    def load_used_orders(self, start_timestamp: int = None, end_timestamp: int = None) -> dict:
        """
        Load used_orders t·ª´ transactions trong kho·∫£ng th·ªùi gian
        Args:
            start_timestamp: Timestamp b·∫Øt ƒë·∫ßu (milliseconds)
            end_timestamp: Timestamp k·∫øt th√∫c (milliseconds)
        Returns:
            dict: Dictionary ch·ª©a order_number -> order_status
        """
        try:
            used_orders = {}
            
            # ƒê·ªçc t·∫•t c·∫£ c√°c file transactions
            for date_file in sorted(self.base_dir.glob("transactions_*.json"), reverse=True):
                if not date_file.exists():
                    continue
                    
                with open(date_file, 'r', encoding='utf-8') as f:
                    transactions = json.load(f)
                
                for transaction in transactions:
                    order_number = transaction.get('order_number')
                    order_status = transaction.get('order_status', 'UNKNOWN')
                    transaction_timestamp = transaction.get('timestamp', 0) * 1000  # Convert to milliseconds
                    
                    # Ki·ªÉm tra ƒëi·ªÅu ki·ªán th·ªùi gian n·∫øu c√≥
                    if start_timestamp is not None and transaction_timestamp < start_timestamp:
                        continue
                    if end_timestamp is not None and transaction_timestamp > end_timestamp:
                        continue
                    
                    if order_number:
                        used_orders[order_number] = order_status
            
            self.logger.info(f"ƒê√£ load {len(used_orders)} orders t·ª´ transactions (c√≥ filter th·ªùi gian)")
            return used_orders
                
        except Exception as e:
            self.logger.error(f"L·ªói khi load used_orders t·ª´ transactions: {e}")
            return {}
    
    def update_used_orders(self, order_number: str, order_status: str) -> bool:
        """
        C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa m·ªôt order c·ª• th·ªÉ trong transactions
        Args:
            order_number: S·ªë order
            order_status: Tr·∫°ng th√°i m·ªõi
        Returns:
            bool: True n·∫øu c·∫≠p nh·∫≠t th√†nh c√¥ng
        """
        try:
            # T√¨m transaction trong t·∫•t c·∫£ c√°c file
            for date_file in self.base_dir.glob("transactions_*.json"):
                if not date_file.exists():
                    continue
                    
                with open(date_file, 'r', encoding='utf-8') as f:
                    transactions = json.load(f)
                
                # T√¨m v√† c·∫≠p nh·∫≠t transaction
                updated = False
                for transaction in transactions:
                    if transaction.get('order_number') == order_number:
                        transaction['order_status'] = order_status
                        updated = True
                        break
                
                # L∆∞u l·∫°i n·∫øu c√≥ c·∫≠p nh·∫≠t
                if updated:
                    with open(date_file, 'w', encoding='utf-8') as f:
                        json.dump(transactions, f, ensure_ascii=False, indent=2)
                    
                    self.logger.debug(f"ƒê√£ c·∫≠p nh·∫≠t order {order_number} -> {order_status} trong {date_file}")
                    return True
            
            self.logger.warning(f"Kh√¥ng t√¨m th·∫•y order {order_number} trong transactions ƒë·ªÉ c·∫≠p nh·∫≠t")
            return False
            
        except Exception as e:
            self.logger.error(f"L·ªói khi c·∫≠p nh·∫≠t used_orders cho order {order_number}: {e}")
            return False 
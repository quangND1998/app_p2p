"""
Module n√†y ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ t·ª± ƒë·ªông h√≥a tr√¨nh duy·ªát Chrome cho ·ª©ng d·ª•ng Binance P2P Trading.
M·ª•c ƒë√≠ch: T·ª± ƒë·ªông h√≥a c√°c thao t√°c ƒëƒÉng nh·∫≠p v√† l·∫•y th√¥ng tin giao d·ªãch t·ª´ Binance P2P.
"""

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from bs4 import BeautifulSoup
import os
import time
import re
import subprocess
import sys
import logging
from pathlib import Path
sys.path.append(os.path.dirname(os.path.dirname(__file__)))
from config_env import CHROME_DRIVE, CHROME_PATH
from webdriver_manager.chrome import ChromeDriverManager

# Thi·∫øt l·∫≠p logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# S·ª≠ d·ª•ng Path ƒë·ªÉ x·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n an to√†n h∆°n
BASE_DIR = Path(__file__).parent.parent
PROFILE_PATH = BASE_DIR / "Default"

def extract_info_by_key(data):
    """Tr√≠ch xu·∫•t th√¥ng tin t·ª´ d·ªØ li·ªáu giao d·ªãch"""
    result = {}
    for key, value in data.items():
        key_lower = key.lower()
        # Map c√°c tr∆∞·ªùng d·ªØ li·ªáu
        if re.search(r'fiat amount', key_lower):
            result['Fiat amount'] = value
        elif re.search(r'reference message', key_lower):
            result['Reference message'] = value
        elif re.search(r'^name$|full name', key_lower):
            result['Full Name'] = value
        elif re.search(r'bank card|account number', key_lower):
            result['Bank Card'] = value
        elif re.search(r'bank name', key_lower):
            result['Bank Name'] = value
    return result

def create_options(headless: bool = False, port: int = 9222) -> Options:
    """T·∫°o Chrome options v·ªõi c√°c c√†i ƒë·∫∑t an to√†n"""
    chrome_options = Options()
    
    # C√°c t√πy ch·ªçn c∆° b·∫£n v√† b·∫£o m·∫≠t
    chrome_options.add_argument(f'user-data-dir={str(PROFILE_PATH)}')
    chrome_options.add_argument('--disable-extensions')
    chrome_options.add_argument('--disable-dev-shm-usage')
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-gpu')
    chrome_options.add_argument('--disable-blink-features=AutomationControlled')
    chrome_options.add_argument('--disable-notifications')
    chrome_options.add_argument('--disable-popup-blocking')
    chrome_options.add_argument('--disable-infobars')
    
    # C√†i ƒë·∫∑t headless n·∫øu c·∫ßn
    if headless:
        chrome_options.add_argument('--headless=new')
    else:
        chrome_options.add_argument('--window-size=600,400')
    
    return chrome_options

def create_driver(headless: bool = True) -> webdriver.Chrome:
    """T·∫°o Chrome driver v·ªõi c√°c c√†i ƒë·∫∑t an to√†n"""
    try:
        return webdriver.Chrome(
            options=create_options(headless=headless),
            service=Service(ChromeDriverManager().install())
        )
    except Exception as e:
        logger.error(f"L·ªói khi t·∫°o driver: {e}")
        raise

def extract_order_info(order_no: str) -> dict:
    def parse_currency(vnd_str):
        try:
            return float(vnd_str.replace("‚Ç´", "").replace(",", "").strip())
        except Exception as e:
            logger.error(f"[L·ªñI] parse_currency: {e}")
            return None

    driver = None
    bank_info = {}
    label,value = None, None
    try:
        logger.info(f"üöÄ B·∫Øt ƒë·∫ßu tr√≠ch xu·∫•t th√¥ng tin cho order: {order_no}")
        driver = create_driver(False)
        driver.execute_script("window.open('');")
        tabs = driver.window_handles
        driver.switch_to.window(tabs[-1])
        
        url = f"https://p2p.binance.com/en/fiatOrderDetail?orderNo={order_no}"
        logger.info(f"üåê ƒêang truy c·∫≠p URL: {url}")
        driver.get(url)
        time.sleep(3)
        
        logger.info("‚è≥ ƒêang ch·ªù trang load...")
        WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, 'div.subtitle6.text-textBuy'))
                )
        logger.info("‚úÖ Trang ƒë√£ load th√†nh c√¥ng")
        
        soup = BeautifulSoup(driver.page_source, "html.parser")
        logger.info("üìÑ ƒê√£ parse HTML th√†nh c√¥ng")
        
        # T√¨m fiat amount
        fiat_block = soup.select_one("div.subtitle6.text-textBuy")
        if fiat_block:
            fiat_amount = fiat_block.get_text(strip=True)
            bank_info["Fiat amount"] = parse_currency(fiat_amount)
            logger.info(f"üí∞ T√¨m th·∫•y Fiat Amount: {fiat_amount} -> {bank_info['Fiat amount']}")
        else:
            logger.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y Fiat Amount block")

        # T√¨m c√°c th√¥ng tin kh√°c
        sections = soup.find('div',class_='relative w-full')
        if not sections:
            logger.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y section ch√≠nh")
            return bank_info
            
        label_tag,value_tag = None, None
        found_fields = 0
        
        for section in sections:
            all_divs = section.find_all("div")  
            for div in all_divs:
                if div.get("class") and "body2" in div.get("class") and "text-tertiaryText" in div.get("class"):
                    label_tag = div
                if div.get("class") and "body2" in div.get("class") and "text-right" in div.get("class") and "break-words" in div.get("class"):
                    value_tag = div

                if label_tag and value_tag:
                    label = label_tag.text.strip()
                    value = value_tag.text.strip()
                    bank_info[label] = value
                    found_fields += 1
                    logger.info(f"üìã T√¨m th·∫•y field: {label} = {value}")
                    label,value = None, None

        logger.info(f"üìä T·ªïng s·ªë fields t√¨m th·∫•y: {found_fields}")
        logger.info(f"üéØ Th√¥ng tin cu·ªëi c√πng: {bank_info}")
        
        driver.close()
        logger.info("‚úÖ Ho√†n th√†nh tr√≠ch xu·∫•t th√¥ng tin")
        
    except Exception as e:
        logger.error(f"üí• L·ªói khi tr√≠ch xu·∫•t d·ªØ li·ªáu cho order {order_no}: {str(e)}", exc_info=True)

    finally:
        if driver:
            driver.quit()
            logger.info("üîí ƒê√£ ƒë√≥ng driver")
    return bank_info

def launch_chrome_remote_debugging(port: int = 9222) -> None:
    """Kh·ªüi ch·∫°y Chrome v·ªõi ch·∫ø ƒë·ªô remote debugging"""
    chrome_path = Path(CHROME_PATH)
    if not chrome_path.exists():
        raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y Chrome t·∫°i: {chrome_path}")
    
    # T·∫°o command v·ªõi c√°c tham s·ªë an to√†n
    command = [
        str(chrome_path),
        f"--remote-debugging-port={port}",
        f'--user-data-dir={str(PROFILE_PATH)}',
        "--no-first-run",
        "--no-default-browser-check",
        "--new-window",
        "--disable-extensions",
        "--disable-popup-blocking",
        "--disable-notifications"
    ]
    
    try:
        # S·ª≠ d·ª•ng subprocess.Popen v·ªõi c√°c tham s·ªë an to√†n
        process = subprocess.Popen(
            command,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            creationflags=subprocess.CREATE_NO_WINDOW  # ·∫®n console window
        )
        time.sleep(3)  # ƒê·ª£i Chrome kh·ªüi ƒë·ªông
        logger.info("Chrome ƒë√£ ƒë∆∞·ª£c kh·ªüi ch·∫°y th√†nh c√¥ng")
    except Exception as e:
        logger.error(f"L·ªói khi kh·ªüi ch·∫°y Chrome: {e}")
        raise

def login_app():
    driver = None
    bank_info = {}
    try:
        driver = create_driver(False)
        driver.execute_script("window.open('');")
        tabs = driver.window_handles
        driver.switch_to.window(tabs[-1])
        driver.get(f"https://p2p.binance.com/en")
        driver.implicitly_wait(60)
        print(f"[TH√ÄNH C√îNG]")

    except Exception as e:
        print(f"[L·ªñI]: {e}")
    finally:
        if driver:
            driver.quit()
    return bank_info

if __name__ == "__main__":
    login_app()
